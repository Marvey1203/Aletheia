# core/schemas.py (V2.1 - Structured Thought)

from __future__ import annotations
from typing import List, Dict, Any, Optional
from pydantic import BaseModel, Field, ConfigDict
from typing_extensions import TypedDict
import numpy as np
from numpy.typing import NDArray

# --- Core Trace Schemas (Unchanged but validated for completeness) ---
class ToolCall(BaseModel):
    name: str
    args: Dict[str, Any]
    result: Optional[str] = None

class Attempt(BaseModel):
    id: int
    plan: List[str] # This will now hold the DECODED linguistic plan
    confidence_score: Optional[float] = None
    tool_calls: Optional[List[ToolCall]] = Field(default_factory=list)
    candidate: str
    scores: Dict[str, float]
    total: float

class Best(BaseModel):
    attempt_id: int
    candidate: str
    total: float

class Reflection(BaseModel):
    what_worked: str
    what_failed: str
    next_adjustment: str

class Summary(BaseModel):
    answer: str
    reasoning: str
    next_action: str

class ModelInfo(BaseModel):
    name: str
    quant: Optional[str] = None
    runtime: str
    temp: float
    model_config = ConfigDict(protected_namespaces=())

class Trace(BaseModel):
    trace_id: str
    query: str
    seed_id: str
    summary: Summary
    attempts: List[Attempt]
    best: Best
    reflection: Reflection
    artifacts: Optional[List[str]] = Field(default_factory=list)
    timestamp: str
    model_info: ModelInfo
    persona_id: Optional[str] = None
    sub_traces: Optional[List[Trace]] = None


# --- NEW: Schemas for the Omega Core V2 & Self-Evolution Engine ---

class PlanStep(BaseModel):
    """
    Represents a single, structured step in a conceptual plan, implementing
    the 'Semantic Scaffolding' from the Aletheia-Omega R&D memo.
    """
    action_type: NDArray[np.float32] = Field(description="The H_vector for the type of action to be taken (e.g., GREET, ANALYZE, FORMULATE).")
    action_subject: Optional[NDArray[np.float32]] = Field(default=None, description="The optional H_vector for the subject of the action (e.g., 'my own planning process').")
    
    # This is crucial for Pydantic to handle NumPy arrays
    class Config:
        arbitrary_types_allowed = True

class GraphState(TypedDict):
    """
    Represents the state of our cognitive graph, now upgraded for the Omega Planner V2.
    """
    # Core state
    query: str
    context: str
    
    # Social context
    social_context: Optional[Dict[str, float]]

    # Cognitive assets
    pathway: Optional[Dict[str, Any]]
    
    # The conceptual plan generated by the Omega Planner V2
    conceptual_plan: Optional[List[PlanStep]]
    
    # The linguistic plan, decoded from the conceptual_plan
    linguistic_plan: Optional[List[str]]
    
    candidate_answer: Optional[str]
    scores: Optional[Dict[str, float]]
    
    # Meta-cognition state
    revision_history: List[str]